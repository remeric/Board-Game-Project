trigger:
- main

resources:
- repo: self

#Note to self - adding environmental varibles to the linux agent can only be done here - using a script to write them, even to bashrc, drops between tasks and using Azure DevOps variables does not work either

variables:
  tag: '$(Build.BuildId)'
  AWS_ACCESS_KEY_ID: $(client_id)
  AWS_SECRET_ACCESS_KEY: $(client_secret)
  AWS_DEFAULT_REGION: 'us-east-1'
  MY_SECRET : $(secret_key)

stages:
# - stage: Build
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: Docker@2
#       displayName: Build an image
#       inputs:
#         containerRegistry: 'DockerHubRemeric'
#         repository: 'remeric/board-game-selector'
#         command: 'buildAndPush'
#         Dockerfile: '**/app/Dockerfile'
#         tags: '$(tag)'

# - stage: Update
#   displayName: Update
#   jobs:
#   - job: Update
#     displayName: Update Terraform Task
#     pool:
#       vmImage: 'Ubuntu-latest'
#     steps: 
#       - task: DownloadSecureFile@1
#         name: publickey
#         inputs:
#           secureFile: 'default-ec2.pem'

#       - task: TerraformCLI@0  
#         inputs:
#           command: 'init'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
#           commandOptions: '-backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" '
#           backendType: 'selfConfigured'
#           allowTelemetryCollection: true
#       - task: TerraformCLI@0
#         inputs:
#           command: 'apply'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
#           commandOptions: '-var access_key=$(access_key) -var secret_key=$(secret_key) -var application_version=92'
#           allowTelemetryCollection: true
#       - task: Bash@3
#         inputs:
#           targetType: 'inline'
#           script: |
#             #!/bin/bash
#             #Verifying global environmental variables are still here
#             echo print environment variables

- stage: Deploy
  displayName: Deploy Container in ECS
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'windows-2022'
    steps:
      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'default-ec2.pem'
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
          dir $(System.DefaultWorkingDirectory)
      #       # Make the aws credentials directory, copy file, create config file
      #       Write-Host "-------Creating folder and copying over credentials"
      #       New-Item -ItemType Directory -Path $ENV:USERPROFILE/.aws/credentials
      #       Dir $ENV:USERPROFILE\.aws
      #       Copy-Item $(Agent.TempDirectory)\default-ec2.pem $ENV:USERPROFILE/.aws/credentials
      #       New-Item -ItemType file $ENV:USERPROFILE/.aws/credentials/config
      #       New-Item -ItemType file $ENV:USERPROFILE/.aws/credentials/credentials
      #       add-content $ENV:USERPROFILE/.aws/credentials/credential "aws_access_key_id = $(client_id)"
      #       add-content $ENV:USERPROFILE/.aws/credentials/credential "aws_secret_access_key = $(client_secret)"
      #       add-content $ENV:USERPROFILE/.aws/credentials/config "region = us-east-1"
            
      #       Write-Host "Get credential then config configs"
      #       get-content $ENV:USERPROFILE/.aws/credentials/credential
      #       get-content $ENV:USERPROFILE/.aws/credentials/config

      # - task: CopyFiles@2
      #   inputs:
      #     SourceFolder: '$(Agent.TempDirectory)'
      #     Contents: 'default-ec2.pem'
      #     TargetFolder: '$ENV:USERPROFILE\.aws\credentials'
      # - task: PowerShell@2
      #   env:
      #     MY_SECRET: $(secret_key)
      #   inputs:
      #     targetType: 'inline'
      #     script: |

      #       #Set to powershell 7
      #       if ($PSVersionTable.PSVersion -lt [Version]"7.0") {
      #       Write-Host "Version: $($PSVersionTable.PSVersion)"
      #       Write-Host "Re-launching as pwsh"
      #       pwsh -File $MyInvocation.MyCommand.Definition
      #       exit
      #       }

      #       #Write-Host "-------Install AWS Tools"
      #       #start-Process "msiexec.exe" -argumentlist "/i https://awscli.amazonaws.com/AWSCLIV2.msi /qn" -Wait


      #       Write-Host "-------Installing AWS Tools Common module"
      #       Set-executionpolicy unrestricted
      #       $ProgressPreference = "SilentlyContinue"
      #       Set-PSRepository PSGallery -InstallationPolicy Trusted
      #       install-module AWS.Tools.Common -SkipPublisherCheck

      #       Write-Host "-------Check Installed Modules"
      #       Get-InstalledModule

      #       #$secret = ConvertTo-SecureString "${env:MY_SECRET}" -AsPlainText -Force
      #       $secret = $env:MY_SECRET

      #       # Write-Host "secret"
      #       # $secret
      #       # Write-Host "(secret_key)"
      #       # $(secret_key)
      #       # Write-Host "env:MY_SECRET"
      #       # $env:MY_SECRET

      #       Write-Host "------- Set AWS Credentials"
      #       #Set-AWSCredential -AccessKey $(access_key) -SecretKey $(secret_key) -StoreAs MyProfile
      #       #Set-AWSCredential -ProfileName MyProfile
      #       #Initialize-AWSDefaultConfiguration -ProfileName MyProfile -Region us-east-1
      #       #Aws configure --profile MyProfile
      #       Initialize-AWSDefaultConfiguration -AccessKey $(access_key) -SecretKey $(my_secret_key)

      #       Write-Host "------- PS Version Information"
      #       Get-Host

      #       Write-Host "-------AWS Version Information"
      #       aws --version

      #       # Query for name of cluster and service (assuming you left cluster and service names the same from the terraform script)
            
      #       Write-Host "------- Getting Cluster"
      #       $clusterlist = aws ecs list-clusters --query 'clusterArns' --region us-east-1
      #       $clusters = $clusterlist | ConvertFrom-Json

      #       Write-Host "Cluster list variable $clusterlist"
      #       Write-Host "Clusters variable $clusters"
      #       Write-Host "PS Version"
      #       Get-Host
            
      #       foreach ($cluster in $clusters) {
      #           If ($cluster -like "*BGapp_ECS_cluster*") {
      #               $clusterarn = $cluster
      #               echo $clusterarn
      #           }
      #       }
      #       Write-Host "-------Cluster ARN $clusterarn"


      #       Write-Host "-------Getting Service ARN"
      #       $servicelist = aws ecs list-services --cluster $clusterarn --query 'serviceArns'  --region us-east-1
      #       $services = $servicelist | ConvertFrom-Json
            
      #       foreach ($service in $services) {
      #           If ($service -like "*BGapp_ECS_service*") {
      #               $servicearn = $service
      #               echo $servicearn
      #           }
      #       }
      #       Write-Host "-------Service ARN $servicearn"
            
      #       #update service that is running task
      #       #aws ecs update-service --cluster $clusterarn --service $servicearn --region us-east-1 --force-new-deployment
      - task: PowerShell@2
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)\scripts\Azure_Devops_AWS_ECS_Update.ps1'
          arguments: '$(access_key) $(my_secret_key)'



# -var ssh_public_key=$(publickey.securefilepath) 

# commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var application_version=92'