trigger:
- main

resources:
- repo: self

#Note to self - adding environmental varibles to the linux agent can only be done here - using a script to write them, even to bashrc, drops between tasks and using Azure DevOps variables does not work either

variables:
  tag: '$(Build.BuildId)'
  AWS_ACCESS_KEY_ID: $(client_id)
  AWS_SECRET_ACCESS_KEY: $(client_secret)
  AWS_DEFAULT_REGION: 'us-east-1'
  MY_SECRET : $(secret_key)

stages:
# - stage: Build
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: Docker@2
#       displayName: Build an image
#       inputs:
#         containerRegistry: 'DockerHubRemeric'
#         repository: 'remeric/board-game-selector'
#         command: 'buildAndPush'
#         Dockerfile: '**/app/Dockerfile'
#         tags: '$(tag)'

# - stage: Update
#   displayName: Update
#   jobs:
#   - job: Update
#     displayName: Update Terraform Task
#     pool:
#       vmImage: 'Ubuntu-latest'
#     steps: 
#       - task: DownloadSecureFile@1
#         name: publickey
#         inputs:
#           secureFile: 'default-ec2.pem'

#       - task: TerraformCLI@0  
#         inputs:
#           command: 'init'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
#           commandOptions: '-backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" '
#           backendType: 'selfConfigured'
#           allowTelemetryCollection: true
#       - task: TerraformCLI@0
#         inputs:
#           command: 'apply'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
#           commandOptions: '-var access_key=$(access_key) -var secret_key=$(secret_key) -var application_version=92'
#           allowTelemetryCollection: true

- stage: Deploy
  displayName: Deploy Container in ECS
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'windows-2022'
    steps:
      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'default-ec2.pem'
      # - task: PowerShell@2
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       # Make the aws credentials directory, copy file, create config file
      #       Write-Host "-------Creating folder and copying over credentials"
      #       New-Item -ItemType Directory -Path $ENV:USERPROFILE/.aws/credentials
      #       Dir $ENV:USERPROFILE\.aws
      #       Copy-Item $(Agent.TempDirectory)\default-ec2.pem $ENV:USERPROFILE/.aws/credentials
      #       New-Item -ItemType file $ENV:USERPROFILE/.aws/credentials/config
      #       New-Item -ItemType file $ENV:USERPROFILE/.aws/credentials/credentials
      #       add-content $ENV:USERPROFILE/.aws/credentials/credential "aws_access_key_id = $(client_id)"
      #       add-content $ENV:USERPROFILE/.aws/credentials/credential "aws_secret_access_key = $(client_secret)"
      #       add-content $ENV:USERPROFILE/.aws/credentials/config "region = us-east-1"
            
      #       Write-Host "Get credential then config configs"
      #       get-content $ENV:USERPROFILE/.aws/credentials/credential
      #       get-content $ENV:USERPROFILE/.aws/credentials/config

      # - task: CopyFiles@2
      #   inputs:
      #     SourceFolder: '$(Agent.TempDirectory)'
      #     Contents: 'default-ec2.pem'
      #     TargetFolder: '$ENV:USERPROFILE\.aws\credentials'
      # - task: PowerShell@2
      #   inputs:
      #     pwsh: true
      #     filePath: '$(System.DefaultWorkingDirectory)\scripts\Azure_Devops_AWS_ECS_Update.ps1'
      #     arguments: '$(access_key) $(my_secret_key)'
      - task: AWSCLI@1
        inputs:
          awsCredentials: 'aws_cl_user'
          regionName: 'us-east-1'
          #awsCommand: 'aws ecs update-service --cluster arn:aws:ecs:us-east-1:502322368951:cluster/BGapp_ECS_cluster --service rn:aws:ecs:us-east-1:502322368951:service/BGapp_ECS_cluster/BGapp_ecs_service --force-new-deployment'
          awsCommand: 'aws help'