trigger:
- main

resources:
- repo: self

#Note to self - adding environmental varibles to the linux agent can only be done here - using a script to write them, even to bashrc, drops between tasks and using Azure DevOps variables does not work either

variables:
  tag: '$(Build.BuildId)'
  TEST_TEST: 'test'
  TF_VAR_AWS_ACCESS_KEY_ID: $(client_id)
  TF_VAR_AWS_SECRET_ACCESS_KEY: $(client_secret)
  TF_VAR_AWS_DEFAULT_REGION: 'us-east-1'

stages:
# - stage: Build
#   displayName: Build image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: Docker@2
#       displayName: Build an image
#       inputs:
#         containerRegistry: 'DockerHubRemeric'
#         repository: 'remeric/board-game-selector'
#         command: 'buildAndPush'
#         Dockerfile: '**/app/Dockerfile'
#         tags: '$(tag)'

- stage: Update
  displayName: Update
  jobs:
  - job: Update
    displayName: Update Terraform Task
    pool:
      vmImage: 'Ubuntu-latest'
    steps: 
      - task: DownloadSecureFile@1
        name: publickey
        inputs:
          secureFile: 'default-ec2.pem'
      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       #!/bin/bash
      #       #For verifying and troubleshooting environment variables for AWS login


      #       echo show current directory
      #       pwd

      #       echo show environment variables dont exit
      #       printenv AWS_ACCESS_KEY_ID
      #       printenv AWS_SECRET_ACCESS_KEY
      #       printenv AWS_DEFAULT_REGION

      #       echo add anvironment variables
      #       echo AWS_ACCESS_KEY_ID=$(client_id) >> ~/.bashrc
      #       echo AWS_SECRET_ACCESS_KEY=$(client_secret) >> ~/.bashrc
      #       echo AWS_DEFAULT_REGION=us-east-1 >> ~/.bashrc
      #       source ~/.bashrc

      #       echo print environment variables
      #       printenv AWS_ACCESS_KEY_ID
      #       printenv AWS_SECRET_ACCESS_KEY
      #       printenv AWS_DEFAULT_REGION

      #       echo show bashrc file
      #       cat ~/.bashrc

      #       echo print all environment variables
      #       env
      #     noRc: false
      - task: TerraformCLI@0  
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
          commandOptions: '-backend-config="access_key=$(access_key)" -backend-config="secret_key=$(secret_key)" '
          backendType: 'selfConfigured'
          allowTelemetryCollection: true
      - task: TerraformCLI@0
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/aws-ecs'
          commandOptions: '-var access_key=$(access_key) -var secret_key=$(secret_key) -var application_version=92'
          allowTelemetryCollection: true
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            #!/bin/bash
            #Verifying global environmental variables are still here
            echo print environment variables

- stage: Deploy
  displayName: Deploy Container in ECS
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            #Install AWS Tools
            msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi /qn

            # Set AWS credentials
            Set-AWSCredential -AccessKey $(access_key) -SecretKey $(secret_key) -StoreAs default

            # Query for name of cluster and service (assuming you left cluster and service names the same from the terraform script)
            
            $clusterlist = aws ecs list-clusters --query 'clusterArns'
            $clusters = $clusterlist | ConvertFrom-Json
            
            foreach ($cluster in $clusters) {
                If ($cluster -like "*BGapp_ECS_cluster*") {
                    $clusterarn = $cluster
                    echo $clusterarn
                }
            }
            
            $servicelist = aws ecs list-services --cluster $clusterarn --query 'serviceArns'
            $services = $servicelist | ConvertFrom-Json
            
            foreach ($service in $services) {
                If ($service -like "*BGapp_ECS_service*") {
                    $servicearn = $service
                    echo $servicearn
                }
            }
            
            #update service that is running task
            aws ecs update-service --cluster $clusterarn --service $servicearn --force-new-deployment

# -var ssh_public_key=$(publickey.securefilepath) 

# commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var application_version=92'